@{
    Layout = "_EnterNameLayout";
}

@model User;

<div class="enterName-container">
    <div id="loadingOverlay">
        <div id="spinner-container" class="d-flex justify-content-center align-items-center">
            <div id="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>

    <div>
        <form id="inputName" asp-controller="EnterName" asp-action="Index" method="post">
            <label class="hidden" id="enter-your-name">Enter your name :</label>
            <div class="input-wrapper">
                <input autocomplete="off" class="hidden" id="input" type="text" placeholder="Your name" asp-for="Name" />
                <span class="icon" onclick="handleIconClick()">
                    <img id="imgNext" class="hidden" src="~/images/Icon-Right-Arrow.png" />
                </span>
            </div>
        </form>
    </div>

    <div class="hidden" id="skipBtn">
        <p>Skip</p>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        $("#skipBtn").click(function (e) {
            $('#loadingOverlay').show();

            e.preventDefault();
            window.location.href = '@Url.Action("Index", "Main")';
        });

        setTimeout(function () {
            $("#enter-your-name, #skipBtn, #imgNext, #input").removeClass('hidden');
            $("#enter-your-name, #skipBtn, #imgNext, #input").addClass('entrance');

            setTimeout(function () {
                $("#imgNext").addClass('blinking');
            }, 800);
        }, 1000);

        document.body.classList.add('animation-started');
    });

    function handleIconClick() {
        $('#loadingOverlay').show();

        setTimeout(function () {
            $("#enter-your-name, #imgNext, #skipBtn, #input").addClass('exit');

            submitForm();
        }, 1000);
    }

    function submitForm() {
        $("#inputName").submit();
    }

    // Idle Timeout
    let idleTime = 0;
    const idleTimeout = 300;
    const homePageUrl = "/Home/Index";

    const idleInterval = setInterval(timerIncrement, 1000);

    document.addEventListener('mousemove', resetIdleTime);
    document.addEventListener('keydown', resetIdleTime);

    function timerIncrement() {
        idleTime++;
        if (idleTime >= idleTimeout) {
            window.location.href = homePageUrl;
        }
    }

    function resetIdleTime() {
        idleTime = 0;
    }

    // Virtual Keyboard
    const Keyboard = {
        elements: {
            main: null,
            keysContainer: null,
            keys: []
        },

        eventHandlers: {
            oninput: null,
            onclose: null
        },

        properties: {
            value: "",
            capsLock: false
        },

        init() {
            this.elements.main = document.createElement("div");
            this.elements.keysContainer = document.createElement("div");

            this.elements.main.classList.add("keyboard", "keyboard--hidden");
            this.elements.keysContainer.classList.add("keyboard__keys");
            this.elements.keysContainer.appendChild(this._createKeys());

            this.elements.keys = this.elements.keysContainer.querySelectorAll(".keyboard__key");

            this.elements.main.appendChild(this.elements.keysContainer);
            document.body.appendChild(this.elements.main);

            document.querySelectorAll("#input").forEach(element => {
                element.addEventListener("focus", () => {
                    this.open(element.value, currentValue => {
                        element.value = currentValue;
                    });
                });
            });
        },

        _createKeys() {
            const fragment = document.createDocumentFragment();
            const keyLayout = [
                "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "backspace",
                "q", "w", "e", "r", "t", "y", "u", "i", "o", "p",
                "caps", "a", "s", "d", "f", "g", "h", "j", "k", "l", "enter",
                "done", "z", "x", "c", "v", "b", "n", "m", ",", ".", "?",
                "space"
            ];

            const createIconHTML = (icon_name) => {
                return `<i class="material-icons">${icon_name}</i>`;
            };

            keyLayout.forEach(key => {
                const keyElement = document.createElement("button");
                const insertLineBreak = ["backspace", "p", "enter", "?"].indexOf(key) !== -1;

                keyElement.setAttribute("type", "button");
                keyElement.classList.add("keyboard__key");

                switch (key) {
                    case "backspace":
                        keyElement.classList.add("keyboard__key--wide");
                        keyElement.innerHTML = createIconHTML("backspace");

                        keyElement.addEventListener("click", () => {
                            this.properties.value = this.properties.value.substring(0, this.properties.value.length - 1);
                            this._triggerEvent("oninput");
                        });

                        break;

                    case "caps":
                        keyElement.classList.add("keyboard__key--wide", "keyboard__key--activatable");
                        keyElement.innerHTML = createIconHTML("keyboard_capslock");

                        keyElement.addEventListener("click", () => {
                            this._toggleCapsLock();
                            keyElement.classList.toggle("keyboard__key--active", this.properties.capsLock);
                        });

                        break;

                    case "enter":
                        keyElement.classList.add("keyboard__key--wide");
                        keyElement.innerHTML = createIconHTML("keyboard_return");

                        keyElement.addEventListener("click", () => {
                            this.properties.value += "\n";
                            this._triggerEvent("oninput");
                        });

                        break;

                    case "space":
                        keyElement.classList.add("keyboard__key--extra-wide");
                        keyElement.innerHTML = createIconHTML("space_bar");

                        keyElement.addEventListener("click", () => {
                            this.properties.value += " ";
                            this._triggerEvent("oninput");
                        });

                        break;

                    case "done":
                        keyElement.classList.add("keyboard__key--wide", "keyboard__key--dark");
                        keyElement.innerHTML = createIconHTML("check_circle");

                        keyElement.addEventListener("click", () => {
                            this.close();
                            this._triggerEvent("onclose");
                        });

                        break;

                    default:
                        keyElement.textContent = key.toLowerCase();

                        keyElement.addEventListener("click", () => {
                            this.properties.value += this.properties.capsLock ? key.toUpperCase() : key.toLowerCase();
                            this._triggerEvent("oninput");
                        });

                        break;
                }

                fragment.appendChild(keyElement);

                if (insertLineBreak) {
                    fragment.appendChild(document.createElement("br"));
                }
            });

            return fragment;
        },

        _triggerEvent(handlerName) {
            if (typeof this.eventHandlers[handlerName] == "function") {
                this.eventHandlers[handlerName](this.properties.value);
            }
        },

        _toggleCapsLock() {
            this.properties.capsLock = !this.properties.capsLock;

            for (const key of this.elements.keys) {
                if (key.childElementCount === 0) {
                    key.textContent = this.properties.capsLock ? key.textContent.toUpperCase() : key.textContent.toLowerCase();
                }
            }
        },

        open(initialValue, oninput, onclose) {
            this.properties.value = initialValue || "";
            this.eventHandlers.oninput = oninput;
            this.eventHandlers.onclose = onclose;
            this.elements.main.classList.remove("keyboard--hidden");
        },

        close() {
            this.properties.value = "";
            this.eventHandlers.oninput = oninput;
            this.eventHandlers.onclose = onclose;
            this.elements.main.classList.add("keyboard--hidden");
        }
    };

    window.addEventListener("DOMContentLoaded", function () {
        Keyboard.init();

        document.addEventListener("click", event => {
            const inputElement = document.getElementById("input");

            if (event.target !== inputElement && !inputElement.contains(event.target)) {
                Keyboard.close();
            }
        });

        document.querySelector(".keyboard__keys").addEventListener("click", event => {
            event.stopPropagation();
        });
    });
   
</script>

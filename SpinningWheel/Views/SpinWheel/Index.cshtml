@{
    Layout = "_SpinWheelLayout";
}

<div id="refreshContainer">
    <div id="refreshContent">
        <div class="spin-wheel-desc">
            <div id="logo-gs">
                <img src="/images/Logo-GS Hitam.png" />
            </div>
            <div class="spin-option">
                <div id="spin-wheel-text">
                    <label>Spinning Wheel</label>
                    <p>Spin the wheel to claim your gift.</p>
                    <button id="spin-btn">PRESS TO SPIN</button>
                </div>

                <span id="close">Back</span>
            </div>
        </div>
        <div class="spin-wheel-container">
            <div id="myModal" class="modal">
                <div class="modal-content">
                    <div class="confetti">
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                        <div class="confetti-piece"></div>
                    </div>
                    <div id="final-value"></div>
                    <span class="close" id="closeBtn" onclick="closeModal()">Back</span>
                </div>
            </div>

            <div class="wrapper">
                <div id="bg-spinwheel">
                    <img src="~/images/Icon-Bg-SpinWheel.png"/>
                </div>
                <div class="container-spinwheel">
                    <canvas id="wheel"></canvas>
                    <img alt="spinner-arrow" src="/images/Icon-SpinWheel.png" />
                    <img id="img-logo-spinner" src="~/images/Icon-Spinner.png" alt="gs-logo" />
                </div>
            </div>

            <div id="loadingOverlayItem">
                <div id="spinner-container" class="d-flex justify-content-center align-items-center">
                    <div id="spinner-border-item" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="refreshIndicator">
        <span id="refreshIcon" class="glyphicon glyphicon-refresh"></span>
        <span id="refreshText"></span>
    </div>
</div>

<script>
    const wheel = document.getElementById("wheel");
    const spinBtn = document.getElementById("spin-btn");
    const finalValue = document.getElementById("final-value");
    const closeBtn = document.getElementById("closeBtn");

    //Object that stores values of minimum and maximum angle for a value
    const rotationValues = [
        { minDegree: 0, maxDegree: 60, value: "Pouch bag" },
        { minDegree: 61, maxDegree: 120, value: "Tumblr Lock&Lock" },
        { minDegree: 121, maxDegree: 180, value: "Coba Lagi" },
        { minDegree: 181, maxDegree: 240, value: "Tumbler" },
        { minDegree: 241, maxDegree: 270, value: "Pen" },
        { minDegree: 271, maxDegree: 300, value: "Pen" },
        { minDegree: 301, maxDegree: 360, value: "Topi" },

        /*
        { minDegree: 0, maxDegree: 30, value: "Zonk" },
        { minDegree: 31, maxDegree: 60, value: "Kulkas" },
        { minDegree: 61, maxDegree: 90, value: "Zonk" },
        { minDegree: 91, maxDegree: 120, value: "Permen"},
        { minDegree: 121, maxDegree: 150, value: "Zonk" },
        { minDegree: 151, maxDegree: 180, value: "Ganci" },
        { minDegree: 181, maxDegree: 210, value: "Zonk" },
        { minDegree: 211, maxDegree: 240, value: "Tumbler" },
        { minDegree: 241, maxDegree: 270, value: "Zonk" },
        { minDegree: 271, maxDegree: 300, value: "Pulpen" },
        { minDegree: 301, maxDegree: 315, value: "Zonk" },
        { minDegree: 316, maxDegree: 330, value: "Topi" },
        { minDegree: 331, maxDegree: 360, value: "Zonk" }

        // 15 derajat 2 terbawah
        { minDegree: 0, maxDegree: 30, value: "Zonk" },
        { minDegree: 31, maxDegree: 60, value: "Kulkas" },
        { minDegree: 61, maxDegree: 90, value: "Zonk" },
        { minDegree: 91, maxDegree: 120, value: "Permen" },
        { minDegree: 121, maxDegree: 150, value: "Zonk" },
        { minDegree: 151, maxDegree: 180, value: "Ganci" },
        { minDegree: 181, maxDegree: 210, value: "Zonk" },
        { minDegree: 211, maxDegree: 240, value: "Tumbler" },
        { minDegree: 241, maxDegree: 270, value: "Zonk" },
        { minDegree: 271, maxDegree: 300, value: "Pulpen" },
        { minDegree: 301, maxDegree: 330, value: "Zonk" },
        { minDegree: 331, maxDegree: 345, value: "Topi" },
        { minDegree: 346, maxDegree: 360, value: "Zonk" }

        { minDegree: 0, maxDegree: 30, value: "Kulkas" },
        { minDegree: 31, maxDegree: 60, value: "Zonk" },
        { minDegree: 61, maxDegree: 90, value: "Zonk" },
        { minDegree: 91, maxDegree: 120, value: "Permen" },
        { minDegree: 121, maxDegree: 150, value: "Ganci" },
        { minDegree: 151, maxDegree: 180, value: "Zonk" },
        { minDegree: 181, maxDegree: 210, value: "Zonk" },
        { minDegree: 211, maxDegree: 240, value: "Tumbler" },
        { minDegree: 241, maxDegree: 270, value: "Pulpen" },
        { minDegree: 271, maxDegree: 300, value: "Zonk" },
        { minDegree: 301, maxDegree: 330, value: "Zonk" },
        { minDegree: 331, maxDegree: 345, value: "Topi" },
        { minDegree: 346, maxDegree: 360, value: "Kulkas" }
        */

    ];
    
    //Size of each piece
    const data = [16, 16, 16, 16, 16, 16];
    //const data = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8];
    //const data = [8, 16, 8, 8, 16, 8, 8, 16, 8];

    //background color for each piece
    var pieColors = [
        "#fd226a",
        "#fc6f35",
        "#ffbd59",
        "#fd226a",
        "#ff5757",
        "#ffbd59"
    ];

    //Create chart
    let myChart = new Chart(wheel, {
        //Plugin for displaying text on pie chart
        plugins: [ChartDataLabels],
        type: "pie", // Chart Type Pie
        data: {
            labels: ["Topi", "Pen", "Tumbler", "Coba Lagi", "Lock&Lock", "Pouch bag"],
            //labels: ["Topi", "Zonk", "Pulpen", "Zonk", "Tumbler", "Zonk", "Ganci", "Zonk", "Permen", "Zonk", "Kulkas", "Zonk"],
            //labels: ["Topi", "Zonk", "Pulpen", "Tumbler", "Zonk", "Ganci", "Permen", "Zonk", "Kulkas"],

            //Settings for dataset/pie
            datasets: [
                {
                    backgroundColor: pieColors,
                    data: data,
                    borderWidth: -10
                },
            ],
        },
        options: {
            maintainAspectRatio: false,
            animation: { duration: 0 },
            plugins: {
                tooltip: false,
                legend: {
                    display: false,
                },
                datalabels: {
                    padding: 10,
                    rotation: (context) =>
                        context.dataIndex * (360 / context.chart.data.labels.length) +
                        360 / context.chart.data.labels.length / 2 +
                        270 +
                        context.chart.options.rotation,
                    color: '#FFFFFF',
                    formatter: function (_, context) {
                        const label = context.chart.data.labels[context.dataIndex];
                        return label;
                    },
                    font: function (context) {
                        const label = context.chart.data.labels[context.dataIndex];

                        if (window.innerWidth < 2160) {
                            return {
                                family: "Rubik",
                                size: 25,
                                weight: "bold",
                            };
                        } else {
                            return {
                                family: "Rubik",
                                size: 70,
                                weight: "bold",
                            };
                        }
                    },
                    anchor: (context) => {
                        if (window.innerWidth < 2160) {
                            return {
                                anchor: 'center'
                            };
                        } else {
                            return {
                                anchor: 'center'
                            };
                        }
                    },
                    align: (context) => {
                        if (window.innerWidth < 2160) {
                            return {
                                align: 'center'
                            };
                        } else {
                            return {
                                align: 'start'
                            };
                        }
                    },
                    offset: (context) => {
                        if (window.innerWidth >= 2160) {
                            return -260;
                        } else {
                            return 0; // or whatever value you want for smaller window widths
                        }
                    }
                }
            },
        },
    });

    const valueGenerator = (angleValue) => {
        for (let i of rotationValues) {
            // if the angleValue is between min and max then display it
            if (angleValue >= i.minDegree && angleValue <= i.maxDegree) {
                setTimeout(function () {
                    if (i.value == "Coba Lagi") {
                        finalValue.innerHTML =
                            `<div>
                            <p id="congrats-spin">Oops...</p>
                                <p id="win-spin">You got: </br> <p style="color: #FD226A">${i.value}</p> </p>
                                <p id="thanks-spin">Please try again.</p>
                        </div>`;
                        closeBtn.innerHTML = 'Spin Again';

                    }
                    else {
                        finalValue.innerHTML =
                            `<div>
                            <p id="congrats-spin">CONGRATULATIONS</p>
                                <p id="win-spin">You win: </br> <p style="color: #FD226A">${i.value}</p> </p>
                                <p id="thanks-spin">Thank you for visiting our booth.</p>
                        </div>`;
                    }
                    
                    spinBtn.disabled = false;

                    openModal();
                }, 700);
                break;
            }
        }
    };

    function openModal() {
        const modal = document.getElementById('myModal');
        modal.style.display = 'block';
    }

    function closeModal() {
        const modal = document.getElementById('myModal');
        modal.style.display = 'none';
    }

    // Spinner count
    let count = 0;

    // 81 rotations for animation and last rotation for result
    let resultValue = 81;

    var font = new FontFace('Rubik', ' url(https://fonts.gstatic.com/s/rubik/v28/iJWKBXyIfDnIV7nMrXyi0A.woff2)');
    font.load().then(function (loadedFont) {
        document.fonts.add(loadedFont);
        // Font is loaded, initialize and render your chart
        myChart.update();
    }).catch(function (error) {
        console.log('Font loading failed: ' + error);
    });


    // Start spinning
    spinBtn.addEventListener("click", () => {
        spinBtn.disabled = true;

        //Generate random degrees to stop at
        let randomDegree = Math.floor(Math.random() * (355 - 0 + 1) + 0);

        //Interval for rotation animation
        let rotationInterval = window.setInterval(() => {
            //Set rotation for piechart
            /*
            Initially to make the piechart rotate faster we set resultValue to 101 so it rotates 101 degrees at a time and this reduces by 1 with every count. Eventually on last rotation we rotate by 1 degree at a time.
            */
            myChart.options.rotation = myChart.options.rotation + resultValue;

            myChart.update();
            
            //If rotation>360 reset it back to 0
            if (myChart.options.rotation >= 360) {
                count += 1;
                resultValue -= 5;
                myChart.options.rotation = 0;
            } else if (count > 15 && myChart.options.rotation == randomDegree) {
                valueGenerator(randomDegree);
                clearInterval(rotationInterval);
                count = 0;
                resultValue = 101;
            }
        }, 20);
    });

    $(function () {
        $("#close").click(function (e) {
            $('#loadingOverlayItem').show();
            e.preventDefault();

            document.location = '@Url.Action("Index", "Main")';
        });
    });

    $(document).ready(function () {
        var startY;
        var touchMoved = false;

        $('#refreshContainer').on('touchstart', function (e) {
            var touchobj = e.originalEvent.changedTouches[0];
            startY = touchobj.clientY;
            touchMoved = false;
        });

        $('#refreshContainer').on('touchmove', function (e) {
            var touchobj = e.originalEvent.changedTouches[0];
            var dist = touchobj.clientY - startY;

            if (dist > 0) {
                e.preventDefault();
                touchMoved = true;

                if (dist > 40) {
                    $('#refreshIndicator').addClass('refreshing');
                    $('#refreshText').text("Release to refresh");
                } else {
                    $('#refreshIndicator').removeClass('refreshing');
                    $('#refreshText').text("");
                }
            }
        });

        $('#refreshContainer').on('touchend', function (e) {
            if (touchMoved) {
                if ($('#refreshIndicator').hasClass('refreshing')) {

                    setTimeout(function () {
                        location.reload();
                    }, 1000);
                }
                $('#refreshIndicator').removeClass('refreshing');
            }
        });
    });

    let idleTime = 0;
    const idleTimeout = 300;
    const homePageUrl = "/Home/Index";

    const idleInterval = setInterval(timerIncrement, 1000);

    document.addEventListener('mousemove', resetIdleTime);
    document.addEventListener('keydown', resetIdleTime);

    function timerIncrement() {
        idleTime++;
        if (idleTime >= idleTimeout) {
            window.location.href = homePageUrl;
        }
    }

    function resetIdleTime() {
        idleTime = 0;
    }
</script>